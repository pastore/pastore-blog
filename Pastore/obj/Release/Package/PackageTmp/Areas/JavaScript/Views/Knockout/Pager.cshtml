@{ 
    Layout = "~/Areas/JavaScript/Views/Shared/_KnockoutLayuot.cshtml";
}
<style>
    .diasbled_link{
        pointer-events: none;
        cursor: default;
        opacity:0.6;
    }
</style>
<table>
    <thead>
        <tr>Name</tr>
    </thead>
    <tbody data-bind="foreach: paginated">
        <tr>
            <td data-bind="text: $data"></td>
        </tr>
    </tbody>
</table>
<div class="pager" data-bind="visible: items().length > $root.currentPage()">
    <a href="javascript:void(0)" data-bind="click: prev, css: $root.currentPage() == 1 ? 'diasbled_link' : ''">&lt;</a>
    <ul data-bind="foreach: pagerLinks" style="display:inline-block;padding:0">
        <li style="display:inline-block;width:20px;text-align:center">
            <a href="javascript:void(0)" data-bind="text: $data, click: $root.clickLink,style: { color : $data == $root.currentPage() ? 'red' : 'black' }"></a>
        </li>
    </ul>
    <a href="javascript:void(0)" data-bind="click: next, css: $root.currentPage() == $root.totalPages() ? 'diasbled_link' : ''">&gt;</a>
</div>
<script>
    var pagerModel = function (countPerPage, countPagerLinks) {
        var  self = this;
        self.items = ko.observableArray([]);
        self.currentPage = ko.observable(1);
        self.countPerPage = countPerPage;
        self.countPagerLinks = countPagerLinks;
        self.pagerLinks = ko.observableArray([]);
        self.totalPages = ko.computed(function (){
            var totals = Math.floor(self.items().length / self.countPerPage);
            totals += self.items().length % self.countPerPage > 0 ? 1 : 0;
            return totals;
        });
        self.internalCountPagerLinks = ko.computed(function () {
            var data = self.totalPages() > self.countPagerLinks ? self.countPagerLinks : self.totalPages();
            return data;
        });
        self.paginated = ko.computed(function () {
            var first = (self.currentPage() - 1) * self.countPerPage;
            return self.items.slice(first, first + self.countPerPage);
        });
        self.clickLink = function (item) {
            self.currentPage(item);
        };
        self.next = function () {
            var match = ko.utils.arrayFirst(self.pagerLinks(), function (item) {
                return self.currentPage() + 1 === item;
            });
            if (!match )
            {
                var data = self.pagerLinks().slice(0);
                self.pagerLinks([]);
                for (var i = 0; i < self.internalCountPagerLinks(); i++) {
                    self.pagerLinks.push(data[i] + 1);
                }
            }
            if (self.currentPage() < self.totalPages())
            {
                self.currentPage(self.currentPage() + 1);
            }
        };
        self.prev = function () {
            var match = ko.utils.arrayFirst(self.pagerLinks(), function (item) {
                return self.currentPage() - 1 === item;
            });
            if(!match)
            {
                var data = self.pagerLinks().slice(0);
                self.pagerLinks([]);
                for (var i = 0; i < self.internalCountPagerLinks(); i++) {
                    self.pagerLinks.push(data[i] - 1);
                }
            }
            self.currentPage(self.currentPage() - 1);
        };
        self.loadData = function () {
            for (var i = 0; i < 15; i++) {
                self.items.push(self.randomString());
            }
            for (var i = 1; i <= self.internalCountPagerLinks(); i++) {
                self.pagerLinks.push(i);
            }
        }
        self.randomString = function () {
            var value = "";
            var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < 10; i++) {
                value += letters.charAt(Math.floor(Math.random() * letters.length));
            }
            return value;
        }
        self.loadData();
    }
    ko.applyBindings(new pagerModel(10,3));
</script>